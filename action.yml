name: 'Push Container Action'

description: 'Push built images to Docker Hub/OSG Harbor'

inputs:
  osg_series:
    description: 'OSG release series used to install packages'
    required: true
  repo:
    description: 'Input string that gets passed along to the docker build args'
    required: true
  base_os:
    description: >-
      Operating system of the base image, intended for use with the
      OSG software-base image.  Passed along as the BASE_OS build
      argument (default: el9)
    required: false
    default: el9
  registry_url:
    description: 'URL of the registry'
    required: true
  registry_user:
    description: 'Username of the registry'
    required: true
  registry_pass:
    description: 'Password of the registry'
    required: true
  context:
    description: 'Path to container files, including Dockerfile'
    required: false
    default: '.'
  name:
    description: 'Name of image, including the organization (e.g. "opensciencegrid/image")'
    required: false
    default: ''
  timestamp_tag:
    description: >-
      Timestamped tag name (e.g.,
      "opensciencegrid/osgvo-docker-pilot3.6-release-YYYYMMDD-hhmm")
      used to pass the Dockerfile as $TIMESTAMP_TAG
    required: false
    default: ''
  image_name:
    description: 'Name of the image to build, e.g. "opensciencegrid/software-base"'
    required: false
    default: ''
  image_tag:
    description: 'Explicit tag for the image. If provided, will overwrite the default <series>-<base-os>-<repo> tag'
    required: false
    default: ''
  platform:
    description: 'Platform of the image to build, e.g. "linux/amd64"'
    required: false
    default: 'linux/amd64'

  clean_before_build:
    description: >-
      Whether to undo all unstaged changes to the repo prior to build. May interfere
      with artifacts generated in previous GHA steps.
    required: false
    default: true

runs:
  using: "composite"
  steps:
  - uses: actions/checkout@v3
    with:
      clean: ${{ inputs.clean_before_build }}

  - id: generate-image-name
    shell: bash
    run: |
      if  [[ -n "${{ inputs.image_name }}" ]]; then
         IMAGE_NAME="${{ inputs.image_name }}"
      elif [[ -n "${{ inputs.name }}" ]]; then
        # A name was specified
        IMAGE_NAME=${{ inputs.name }}
      elif [[ "${{ inputs.context }}" == "." ]] || \
         [[ ${{ inputs.context }} == "./" ]]; then
         # Try to guess the image name from our docker repo naming conventions
         # E.g., opensciencegrid/docker-frontier-squid
         IMAGE_NAME=${GITHUB_REPOSITORY/\/docker-/\/}
      elif [[ -d "${{ inputs.context }}" ]]; then
         # Assume that the containing dir is the image name
         # TODO: to support more orgs in the opensciencegrid/images repo,
         # grab the image name from the full context path instead
         IMAGE_NAME=${GITHUB_REPOSITORY%%/*}/$(basename ${{ inputs.context }})
      else
        echo "No image_name provided and ${{ inputs.context }} is not a directory"
        exit 1
      fi
      echo "image=${IMAGE_NAME,,}" >> $GITHUB_OUTPUT

  - name: Generate tag list
    id: generate-tag-list
    env:
      REPO: ${{ inputs.repo }}
      OSG_SERIES: ${{ inputs.osg_series }}
      REGISTRY: ${{ inputs.registry_url}}
      TIMESTAMP_TAG: ${{ inputs.timestamp_tag }}
      TAG_OVERRIDE: ${{ inputs.image_tag }}
    shell: bash
    run: |
      docker_repo="$REGISTRY/${{ steps.generate-image-name.outputs.image }}"
      tag_list=()
      if [[ -n "$TAG_OVERRIDE" ]]; then
        tag_list+=("$docker_repo":"$TAG_OVERRIDE")
      else
        if [[ -n $TIMESTAMP_TAG ]]; then
          # grab the YYYYMMDD-hhmm timestamp
          TIMESTAMP=${TIMESTAMP_TAG}
        else
          TIMESTAMP=$(date +%Y%m%d-%H%M)
        fi
        for image_tag in "$OSG_SERIES-$REPO" "$OSG_SERIES-$REPO-$TIMESTAMP"; do
          tag_list+=("$docker_repo":"$image_tag")
        done
      fi 
      IFS=,
      echo "taglist=${tag_list[*]}" >> $GITHUB_OUTPUT

  - name: Import Docker images from cache
    uses: actions/cache@v4
    with:
      path: /tmp/.buildx-cache
      key: ${{ steps.generate-image-name.outputs.image }}_${{ inputs.osg_series}}_${{ inputs.repo }}_buildx_${{ github.sha }}_${{ github.run_id }}

  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v1

  - name: Log in to ${{ inputs.registry_url }}
    uses: docker/login-action@v1
    with:
      registry: ${{ inputs.registry_url }}
      username: ${{ inputs.registry_user }}
      password: ${{ inputs.registry_pass }}

  - name: Build image
    uses: docker/build-push-action@v2.8.0
    with:
      push: true
      context: ${{ inputs.context }}
      platforms: ${{ inputs.platform }}
      build-args: |
        BASE_YUM_REPO=${{ inputs.repo }}
        BASE_OSG_SERIES=${{ inputs.osg_series }}
        BASE_OS=${{ inputs.base_os}}
        TIMESTAMP_TAG=${{ inputs.timestamp_tag }}
      tags: "${{ steps.generate-tag-list.outputs.taglist }}"
      cache-from: type=local,src=/tmp/.buildx-cache

